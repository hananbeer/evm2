#define macro MAIN() = takes (0) returns (0) {
  0x00 msize mstore

start:
  // load pc2 + 1 (stored in msg.data[0:32])
  0x00 mload
  0x01 add
  
  // load msg.data.length
  calldatasize

  // goto label end if (pc2 + 1 > msg.data.length)
  lt end jumpi

  // pc2 < msg.data.length, continue loop

  // load pc2
  0x00 mload

  // load bytecode[pc2] by (msg.data[pc2:pc2+32] >> 248)
  calldataload 0xf8 shr

  // stub is at (pc * 6) + stub_offset
  0x06 mul
  
  // add jump-table start offset aka stub_offset
  op_00 add

  // jump to opcode implementation
  jump

op_00:
  stop
  invalid invalid invalid invalid

op_01:
  add next jump

op_02:
  mul next jump

op_03:
  sub next jump

op_04:
  div next jump

op_05:
  sdiv next jump

op_06:
  mod next jump

op_07:
  smod next jump

op_08:
  addmod next jump

op_09:
  mulmod next jump

op_0a:
  exp next jump

op_0b:
  signextend next jump

op_0c:
  invalid invalid invalid invalid invalid

op_0d:
  invalid invalid invalid invalid invalid

op_0e:
  invalid invalid invalid invalid invalid

op_0f:
  invalid invalid invalid invalid invalid

op_10:
  lt next jump

op_11:
  gt next jump

op_12:
  slt next jump

op_13:
  sgt next jump

op_14:
  eq next jump

op_15:
  iszero next jump

op_16:
  and next jump

op_17:
  or next jump

op_18:
  xor next jump

op_19:
  not next jump

op_1a:
  byte next jump

op_1b:
  shl next jump

op_1c:
  shr next jump

op_1d:
  sar next jump

op_1e:
  invalid invalid invalid invalid invalid

op_1f:
  invalid invalid invalid invalid invalid

op_20:
  impl_sha3 jump
  invalid

op_21:
  invalid invalid invalid invalid invalid

op_22:
  invalid invalid invalid invalid invalid

op_23:
  invalid invalid invalid invalid invalid

op_24:
  invalid invalid invalid invalid invalid

op_25:
  invalid invalid invalid invalid invalid

op_26:
  invalid invalid invalid invalid invalid

op_27:
  invalid invalid invalid invalid invalid

op_28:
  invalid invalid invalid invalid invalid

op_29:
  invalid invalid invalid invalid invalid

op_2a:
  invalid invalid invalid invalid invalid

op_2b:
  invalid invalid invalid invalid invalid

op_2c:
  invalid invalid invalid invalid invalid

op_2d:
  invalid invalid invalid invalid invalid

op_2e:
  invalid invalid invalid invalid invalid

op_2f:
  invalid invalid invalid invalid invalid

op_30:
  address next jump

op_31:
  balance next jump

op_32:
  origin next jump

op_33:
  caller next jump

op_34:
  callvalue next jump

op_35:
  // (requires an additional param for calldata which is annoying but essential)
  calldataload next jump

op_36:
  calldatasize next jump

op_37:
  // TODO: restore implementation.. :( will need to init with different code, or use sload or something :\
  calldatacopy next jump

op_38:
  calldatasize next jump

op_39:
  calldatacopy next jump

op_3a:
  gasprice next jump

op_3b:
  extcodesize next jump

op_3c:
  extcodecopy next jump

op_3d:
  returndatasize next jump

op_3e:
  returndatacopy next jump

op_3f:
  extcodehash next jump

op_40:
  blockhash next jump

op_41:
  coinbase next jump

op_42:
  timestamp next jump

op_43:
  number next jump

op_44:
  difficulty next jump

op_45:
  gaslimit next jump

op_46:
  chainid next jump

op_47:
  selfbalance next jump

op_48:
  basefee next jump

op_49:
  invalid invalid invalid invalid invalid

op_4a:
  invalid invalid invalid invalid invalid

op_4b:
  invalid invalid invalid invalid invalid

op_4c:
  invalid invalid invalid invalid invalid

op_4d:
  invalid invalid invalid invalid invalid

op_4e:
  invalid invalid invalid invalid invalid

op_4f:
  invalid invalid invalid invalid invalid

op_50:
  pop next jump

op_51:
  impl_mload jump
  invalid

op_52:
  impl_mstore jump
  invalid

op_53:
  impl_mstore8 jump
  invalid

op_54:
  sload next jump

op_55:
  sstore next jump

op_56:
  impl_jump jump
  invalid

op_57:
  impl_jumpi jump
  invalid

op_58:
  impl_pc jump
  invalid

op_59:
  impl_msize jump
  invalid

op_5a:
  gas next jump

op_5b:
  next jump
  invalid // save gas instead of executing jumpdest twice

op_5c:
  invalid invalid invalid invalid invalid

op_5d:
  invalid invalid invalid invalid invalid

op_5e:
  invalid invalid invalid invalid invalid

op_5f:
  invalid invalid invalid invalid invalid

op_60:
  impl_push jump
  invalid

op_61:
  impl_push jump
  invalid

op_62:
  impl_push jump
  invalid

op_63:
  impl_push jump
  invalid

op_64:
  impl_push jump
  invalid

op_65:
  impl_push jump
  invalid

op_66:
  impl_push jump
  invalid

op_67:
  impl_push jump
  invalid

op_68:
  impl_push jump
  invalid

op_69:
  impl_push jump
  invalid

op_6a:
  impl_push jump
  invalid

op_6b:
  impl_push jump
  invalid

op_6c:
  impl_push jump
  invalid

op_6d:
  impl_push jump
  invalid

op_6e:
  impl_push jump
  invalid

op_6f:
  impl_push jump
  invalid

op_70:
  impl_push jump
  invalid

op_71:
  impl_push jump
  invalid

op_72:
  impl_push jump
  invalid

op_73:
  impl_push jump
  invalid

op_74:
  impl_push jump
  invalid

op_75:
  impl_push jump
  invalid

op_76:
  impl_push jump
  invalid

op_77:
  impl_push jump
  invalid

op_78:
  impl_push jump
  invalid

op_79:
  impl_push jump
  invalid

op_7a:
  impl_push jump
  invalid

op_7b:
  impl_push jump
  invalid

op_7c:
  impl_push jump
  invalid

op_7d:
  impl_push jump
  invalid

op_7e:
  impl_push jump
  invalid

op_7f:
  impl_push jump
  invalid

op_80:
  dup1 next jump

op_81:
  dup2 next jump

op_82:
  dup3 next jump

op_83:
  dup4 next jump

op_84:
  dup5 next jump

op_85:
  dup6 next jump

op_86:
  dup7 next jump

op_87:
  dup8 next jump

op_88:
  dup9 next jump

op_89:
  dup10 next jump

op_8a:
  dup11 next jump

op_8b:
  dup12 next jump

op_8c:
  dup13 next jump

op_8d:
  dup14 next jump

op_8e:
  dup15 next jump

op_8f:
  dup16 next jump

op_90:
  swap1 next jump

op_91:
  swap2 next jump

op_92:
  swap3 next jump

op_93:
  swap4 next jump

op_94:
  swap5 next jump

op_95:
  swap6 next jump

op_96:
  swap7 next jump

op_97:
  swap8 next jump

op_98:
  swap9 next jump

op_99:
  swap10 next jump

op_9a:
  swap11 next jump

op_9b:
  swap12 next jump

op_9c:
  swap13 next jump

op_9d:
  swap14 next jump

op_9e:
  swap15 next jump

op_9f:
  swap16 next jump

op_a0:
  impl_log0 jump
  invalid

op_a1:
  impl_log1 jump
  invalid

op_a2:
  impl_log2 jump
  invalid

op_a3:
  impl_log3 jump
  invalid

op_a4:
  impl_log4 jump
  invalid

op_a5:
  invalid invalid invalid invalid invalid

op_a6:
  invalid invalid invalid invalid invalid

op_a7:
  invalid invalid invalid invalid invalid

op_a8:
  invalid invalid invalid invalid invalid

op_a9:
  invalid invalid invalid invalid invalid

op_aa:
  invalid invalid invalid invalid invalid

op_ab:
  invalid invalid invalid invalid invalid

op_ac:
  invalid invalid invalid invalid invalid

op_ad:
  invalid invalid invalid invalid invalid

op_ae:
  invalid invalid invalid invalid invalid

op_af:
  invalid invalid invalid invalid invalid

op_b0:
  invalid invalid invalid invalid invalid

op_b1:
  invalid invalid invalid invalid invalid

op_b2:
  invalid invalid invalid invalid invalid

op_b3:
  invalid invalid invalid invalid invalid

op_b4:
  invalid invalid invalid invalid invalid

op_b5:
  invalid invalid invalid invalid invalid

op_b6:
  invalid invalid invalid invalid invalid

op_b7:
  invalid invalid invalid invalid invalid

op_b8:
  invalid invalid invalid invalid invalid

op_b9:
  invalid invalid invalid invalid invalid

op_ba:
  invalid invalid invalid invalid invalid

op_bb:
  invalid invalid invalid invalid invalid

op_bc:
  invalid invalid invalid invalid invalid

op_bd:
  invalid invalid invalid invalid invalid

op_be:
  invalid invalid invalid invalid invalid

op_bf:
  invalid invalid invalid invalid invalid

op_c0:
  invalid invalid invalid invalid invalid

op_c1:
  invalid invalid invalid invalid invalid

op_c2:
  invalid invalid invalid invalid invalid

op_c3:
  invalid invalid invalid invalid invalid

op_c4:
  invalid invalid invalid invalid invalid

op_c5:
  invalid invalid invalid invalid invalid

op_c6:
  invalid invalid invalid invalid invalid

op_c7:
  invalid invalid invalid invalid invalid

op_c8:
  invalid invalid invalid invalid invalid

op_c9:
  invalid invalid invalid invalid invalid

op_ca:
  invalid invalid invalid invalid invalid

op_cb:
  invalid invalid invalid invalid invalid

op_cc:
  invalid invalid invalid invalid invalid

op_cd:
  invalid invalid invalid invalid invalid

op_ce:
  invalid invalid invalid invalid invalid

op_cf:
  invalid invalid invalid invalid invalid

op_d0:
  invalid invalid invalid invalid invalid

op_d1:
  invalid invalid invalid invalid invalid

op_d2:
  invalid invalid invalid invalid invalid

op_d3:
  invalid invalid invalid invalid invalid

op_d4:
  invalid invalid invalid invalid invalid

op_d5:
  invalid invalid invalid invalid invalid

op_d6:
  invalid invalid invalid invalid invalid

op_d7:
  invalid invalid invalid invalid invalid

op_d8:
  invalid invalid invalid invalid invalid

op_d9:
  invalid invalid invalid invalid invalid

op_da:
  invalid invalid invalid invalid invalid

op_db:
  invalid invalid invalid invalid invalid

op_dc:
  invalid invalid invalid invalid invalid

op_dd:
  invalid invalid invalid invalid invalid

op_de:
  invalid invalid invalid invalid invalid

op_df:
  invalid invalid invalid invalid invalid

op_e0:
  invalid invalid invalid invalid invalid

op_e1:
  invalid invalid invalid invalid invalid

op_e2:
  invalid invalid invalid invalid invalid

op_e3:
  invalid invalid invalid invalid invalid

op_e4:
  invalid invalid invalid invalid invalid

op_e5:
  invalid invalid invalid invalid invalid

op_e6:
  invalid invalid invalid invalid invalid

op_e7:
  invalid invalid invalid invalid invalid

op_e8:
  invalid invalid invalid invalid invalid

op_e9:
  invalid invalid invalid invalid invalid

op_ea:
  invalid invalid invalid invalid invalid

op_eb:
  invalid invalid invalid invalid invalid

op_ec:
  invalid invalid invalid invalid invalid

op_ed:
  invalid invalid invalid invalid invalid

op_ee:
  invalid invalid invalid invalid invalid

op_ef:
  invalid invalid invalid invalid invalid

op_f0:
  impl_create jump
  invalid

op_f1:
  impl_call jump
  invalid

op_f2:
  impl_callcode jump
  invalid

op_f3:
  impl_return jump
  invalid

op_f4:
  impl_delegatecall jump
  invalid

op_f5:
  impl_create2 jump
  invalid

op_f6:
  invalid invalid invalid invalid invalid

op_f7:
  invalid invalid invalid invalid invalid

op_f8:
  invalid invalid invalid invalid invalid

op_f9:
  invalid invalid invalid invalid invalid

op_fa:
  impl_staticcall jump
  invalid

op_fb:
  invalid invalid invalid invalid invalid

op_fc:
  invalid invalid invalid invalid invalid

op_fd:
  impl_revert jump
  invalid

op_fe:
  invalid invalid invalid invalid invalid

op_ff:
  // selfdestruct, implemented as stop
  stop
  invalid invalid invalid invalid


impl_sha3:
  // +0x20 for offset (top of stack)
  0x20 add sha3
  next jump


impl_mload:
  // top stack has offset; skip first word (reserved)
  0x20 add mload
  next jump


impl_mstore:
  0x20 add mstore
  next jump


impl_mstore8:
  0x20 add mstore8
  next jump


impl_jump:
  // check if target is jumpdest (0x5b)
  dup1
  calldataload 0xf8 shr
  0x5b sub
  impl_bad_jump jumpi
  0x00 mstore
  start jump // skip advancing pc again


impl_jumpi:
  // top of stack is the condition
  // so push impl_jump and conditionally go there
  impl_jump jumpi
  // otherwise advance normally
  next jump


impl_bad_jump:
  // trick to jump into an invalid jumpdest for nicer output
  // (although might want to revert here or something)
  pc jump
  invalid


impl_pc:
  0x00 mload
  next jump


impl_msize:
  // top stack has offset; skip first word (reserved)
  0x20 msize sub
  next jump


impl_push:
  // PUSHx implementation:
  // load pc2
  0x00 mload
  // [pc2]

  // for the sub 0x5f later
  0x5f
  // [pc2 | 0x5f]

  // dup pc2 to advance it later
  dup2
  // [pc2 | 0x5f | pc2]

  // (msg.data[pc2] - 0x5f) << 8 to get number of bytes
  calldataload 0xf8 shr
  sub
  // [pc2 | size bytes]

  // dup size to advance pc2 later
  dup1
  // [pc2 | size bytes | size bytes]

  // swap1 can be optimized out but kept for sake of code clarity (LOL)
  0x04
  swap1
  shl
  // [pc2 | size bytes | size bits]

  // 256 - num_bytes
  0x100 sub
  // [pc2 | size bytes | 256 - size bits]

  // load pc2 + 1
  dup3
  0x01 add
  // [pc2 | size bytes | 256 - size bits | pc2 + 1]

  // load push data
  calldataload
  // [pc2 | size bytes | 256 - size bits | push data bytes32]

  // msg.data[pc2 + 1:pc2 + 1 + 32] >> size_bits
  swap1
  shr
  // [pc2 | size bytes | push data bytesX]

  // advance pc2 by amount of bytes pushed
  swap2
  // [push data bytesX | size bytes | pc2]
  add
  // [push data bytesX | size bytes + pc2]
  0x00 mstore
  // [push data bits]
  next jump


impl_log0:
  0x20 add log0
  next jump


impl_log1:
  0x20 add log1
  next jump


impl_log2:
  0x20 add log2
  next jump


impl_log3:
  0x20 add log3
  next jump


impl_log4:
  0x20 add log4
  next jump


  impl_call:
  // adjust arg offset
  swap4 0x20 add swap4
  // adjust ret offset
  swap6 0x20 add swap6
  call
  next jump


impl_callcode:
  // adjust arg offset
  swap4 0x20 add swap4
  // adjust ret offset
  swap6 0x20 add swap6
  callcode
  next jump


impl_delegatecall:
  // adjust arg offset
  swap3 0x20 add swap3
  // adjust ret offset
  swap5 0x20 add swap5
  delegatecall
  next jump


impl_staticcall:
  // adjust arg offset
  swap4 0x20 add swap4
  // adjust ret offset
  swap6 0x20 add swap6
  staticcall
  next jump


impl_create:
  // adjust arg offset
  swap1 0x20 add swap1
  create
  next jump

  
impl_create2:
  // adjust arg offset
  swap1 0x20 add swap1
  create2
  next jump



impl_return:
  0x20 add return


impl_revert:
  0x20 add revert


next:
  // jump table exit - advance pc
  0x00 mload
  0x01 add
  0x00 mstore

  // loop back to start
  start jump


end:
  0x20 msize sub
  0x20 return
}