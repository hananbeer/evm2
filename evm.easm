;; init memory (pc2 at first word)
  push 0
  msize
  mstore

;; start loop (offset 4)
  jumpdest

;; load pc2 + 1 (stored in msg.data[0:32])
  push 0
  mload
  push 1
  add

;; load msg.data.length
  calldatasize

;; goto label end if (pc2 + 1 > msg.data.length)
  lt
  push 0x675
  jumpi

;; pc2 < msg.data.length, continue loop

;; load pc2
  push 0
  mload

;; load bytecode[pc2] by (msg.data[pc2:pc2+32] >> 248)
  calldataload
  push 248
  shr

;; stub is at (pc * 6) + stub_offset
  push 6
  mul

;; add jump-table start offset aka stub_offset
  push 0x1f
  add

;; jump to opcode stub / implementation
  jump

;; each stub should be exactly 6 bytes
;; usually jumpdest + opcode + no-ops

;; 00	STOP
  jumpdest
  stop
  invalid
  invalid
  invalid
  invalid

;; 01	ADD
  jumpdest
  add
  push 0x668
  jump

;; 02	MUL
  jumpdest
  mul
  push 0x668
  jump

;; 03	SUB
  jumpdest
  sub
  push 0x668
  jump

;; 04	DIV
  jumpdest
  div
  push 0x668
  jump

;; 05 SDIV
  jumpdest
  sdiv
  push 0x668
  jump

;; 06 MOD
  jumpdest
  mod
  push 0x668
  jump

;; 07 SMOD
  jumpdest
  smod
  push 0x668
  jump

;; 08 ADDMOD
  jumpdest
  addmod
  push 0x668
  jump

;; 09 MULMOD
  jumpdest
  mulmod
  push 0x668
  jump

;; 0A EXP
  jumpdest
  exp
  push 0x668
  jump

;; 0B SIGNEXTEND
  jumpdest
  signextend
  push 0x668
  jump

;; 0c invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 0d invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 0e invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 0f invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 10 LT
  jumpdest
  lt
  push 0x668
  jump

;; 11 GT
  jumpdest
  gt
  push 0x668
  jump

;; 12 SLT
  jumpdest
  slt
  push 0x668
  jump

;; 13 SGT
  jumpdest
  sgt
  push 0x668
  jump

;; 14 EQ
  jumpdest
  eq
  push 0x668
  jump

;; 15 ISZERO
  jumpdest
  iszero
  push 0x668
  jump

;; 16 AND
  jumpdest
  and
  push 0x668
  jump

;; 17 OR
  jumpdest
  or
  push 0x668
  jump

;; 18 XOR
  jumpdest
  xor
  push 0x668
  jump

;; 19 NOT
  jumpdest
  not
  push 0x668
  jump

;; 1A BYTE
  jumpdest
  byte
  push 0x668
  jump

;; 1B SHL
  jumpdest
  shl
  push 0x668
  jump

;; 1C SHR
  jumpdest
  shr
  push 0x668
  jump

;; 1D SAR
  jumpdest
  sar
  push 0x668
  jump

;; 1e invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 1f invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 20 KECCAK256; TODO: jump to impl
  jumpdest
  ;; keccak256
  invalid
  push 0x668
  jump

;; 21 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 22 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 23 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 24 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 25 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 26 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 27 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 28 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 29 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 2a invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 2b invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 2c invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 2d invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 2e invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 2f invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 30 ADDRESS
  jumpdest
  address
  push 0x668
  jump

;; 31 BALANCE
  jumpdest
  balance
  push 0x668
  jump

;; 32 ORIGIN
  jumpdest
  origin
  push 0x668
  jump

;; 33 CALLER
  jumpdest
  caller
  push 0x668
  jump

;; 34 CALLVALUE
  jumpdest
  callvalue
  push 0x668
  jump

;; 35 CALLDATALOAD; TODO: virtualize?
;; (requires an additional param for calldata which is annoying but essential)
  jumpdest
  calldataload
  push 0x668
  jump

;; 36 CALLDATASIIZE; TODO: fixup?
  jumpdest
  calldatasize
  push 0x668
  jump

;; 37 CALLDATACOPY; TODO: implement...
  jumpdest
  ;; TODO: restore implementation.. :( will need to init with different code, or use sload or something :\
  calldatacopy
  push 0x668
  jump

;; 38 CODESIZE; note this is simply implemented as CALLDATASIZE
  jumpdest
  calldatasize
  push 0x668
  jump

;; 39 CODECOPY; note this is simply implemented as CALLDATACOPY
  jumpdest
  calldatacopy
  push 0x668
  jump

;; 3A GASPRICE
  jumpdest
  gasprice
  push 0x668
  jump

;; 3B EXTCODESIZE
  jumpdest
  extcodesize
  push 0x668
  jump

;; 3C EXTCODECOPY
  jumpdest
  extcodecopy
  push 0x668
  jump

;; 3D RETURNDATASIZE
  jumpdest
  returndatasize
  push 0x668
  jump

;; 3E RETURNDATACOPY
  jumpdest
  returndatacopy
  push 0x668
  jump

;; 3F EXTCODEHASH
  jumpdest
  extcodehash
  push 0x668
  jump

;; 40 BLOCKHASH
  jumpdest
  blockhash
  push 0x668
  jump

;; 41 COINBASE
  jumpdest
  coinbase
  push 0x668
  jump

;; 42 TIMESTAMP
  jumpdest
  timestamp
  push 0x668
  jump

;; 43 NUMBER
  jumpdest
  number
  push 0x668
  jump

;; 44 DIFFICULTY / PREVRANDAO
  jumpdest
  difficulty
  push 0x668
  jump

;; 45 GASLIMIT
  jumpdest
  gaslimit
  push 0x668
  jump

;; 46 CHAINID
  jumpdest
  chainid
  push 0x668
  jump

;; 47 SELFBALANCE
  jumpdest
  selfbalance
  push 0x668
  jump

;; 48 BASEFEE
  jumpdest
  basefee
  push 0x668
  jump

;; 49 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 4a invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 4b invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 4c invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 4d invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 4e invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 4f invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 50 POP
  jumpdest
  pop
  push 0x668
  jump

;; 51 MLOAD (virtual)
  jumpdest
  push 0x644
  jump
  invalid

;; 52 MSTORE (virtual)
  jumpdest
  push 0x64d
  jump
  invalid

;; 53 MSTORE8 (virtual)
  jumpdest
  push 0x656
  jump
  invalid

;; 54 SLOAD
  jumpdest
  sload
  push 0x668
  jump

;; 55 SSTORE
  jumpdest
  sstore
  push 0x668
  jump

;; 56 JUMP ;; TODO: implement JUMP
  jumpdest
  invalid
  push 0x668
  jump

;; 57 JUMPI;; TODO: implement JUMPI
  jumpdest
  invalid
  push 0x668
  jump

;; 58 PC; TODO: virtualize
  jumpdest
  pc
  push 0x668
  jump

;; 59 MSIZE (virtual)
  jumpdest
  push 0x65f
  jump
  invalid

;; 5A GAS
  jumpdest
  gas
  push 0x668
  jump

;; 5B JUMPDEST
  jumpdest
  push 0x668
  jump
  invalid ;; save gas instead of executing jumpdest twice

;; 5c invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 5d invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 5e invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 5f invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; 60 PUSH1
  jumpdest
  push 0x61f
  jump
  invalid

;; 61 PUSH2
  jumpdest
  push 0x61f
  jump
  invalid

;; 62 PUSH3
  jumpdest
  push 0x61f
  jump
  invalid

;; 63 PUSH4
  jumpdest
  push 0x61f
  jump
  invalid

;; 64 PUSH5
  jumpdest
  push 0x61f
  jump
  invalid

;; 65 PUSH6
  jumpdest
  push 0x61f
  jump
  invalid

;; 66 PUSH7
  jumpdest
  push 0x61f
  jump
  invalid

;; 67 PUSH8
  jumpdest
  push 0x61f
  jump
  invalid

;; 68 PUSH9
  jumpdest
  push 0x61f
  jump
  invalid

;; 69 PUSH10
  jumpdest
  push 0x61f
  jump
  invalid

;; 6A PUSH11
  jumpdest
  push 0x61f
  jump
  invalid

;; 6B PUSH12
  jumpdest
  push 0x61f
  jump
  invalid

;; 6C PUSH13
  jumpdest
  push 0x61f
  jump
  invalid

;; 6D PUSH14
  jumpdest
  push 0x61f
  jump
  invalid

;; 6E PUSH15
  jumpdest
  push 0x61f
  jump
  invalid

;; 6F PUSH16
  jumpdest
  push 0x61f
  jump
  invalid

;; 70 PUSH17
  jumpdest
  push 0x61f
  jump
  invalid

;; 71 PUSH18
  jumpdest
  push 0x61f
  jump
  invalid

;; 72 PUSH19
  jumpdest
  push 0x61f
  jump
  invalid

;; 73 PUSH20
  jumpdest
  push 0x61f
  jump
  invalid

;; 74 PUSH21
  jumpdest
  push 0x61f
  jump
  invalid

;; 75 PUSH22
  jumpdest
  push 0x61f
  jump
  invalid

;; 76 PUSH23
  jumpdest
  push 0x61f
  jump
  invalid

;; 77 PUSH24
  jumpdest
  push 0x61f
  jump
  invalid

;; 78 PUSH25
  jumpdest
  push 0x61f
  jump
  invalid

;; 79 PUSH26
  jumpdest
  push 0x61f
  jump
  invalid

;; 7A PUSH27
  jumpdest
  push 0x61f
  jump
  invalid

;; 7B PUSH28
  jumpdest
  push 0x61f
  jump
  invalid

;; 7C PUSH29
  jumpdest
  push 0x61f
  jump
  invalid

;; 7D PUSH30
  jumpdest
  push 0x61f
  jump
  invalid

;; 7E PUSH31
  jumpdest
  push 0x61f
  jump
  invalid

;; 7F PUSH32
  jumpdest
  push 0x61f
  jump
  invalid

;; 80 DUP1
  jumpdest
  dup1
  push 0x668
  jump

;; 81 DUP2
  jumpdest
  dup2
  push 0x668
  jump

;; 82 DUP3
  jumpdest
  dup3
  push 0x668
  jump

;; 83 DUP4
  jumpdest
  dup4
  push 0x668
  jump

;; 84 DUP5
  jumpdest
  dup5
  push 0x668
  jump

;; 85 DUP6
  jumpdest
  dup6
  push 0x668
  jump

;; 86 DUP7
  jumpdest
  dup7
  push 0x668
  jump

;; 87 DUP8
  jumpdest
  dup8
  push 0x668
  jump

;; 88 DUP9
  jumpdest
  dup9
  push 0x668
  jump

;; 89 DUP10
  jumpdest
  dup10
  push 0x668
  jump

;; 8A DUP11
  jumpdest
  dup11
  push 0x668
  jump

;; 8B DUP12
  jumpdest
  dup12
  push 0x668
  jump

;; 8C DUP13
  jumpdest
  dup13
  push 0x668
  jump

;; 8D DUP14
  jumpdest
  dup14
  push 0x668
  jump

;; 8E DUP15
  jumpdest
  dup15
  push 0x668
  jump

;; 8F DUP16
  jumpdest
  dup16
  push 0x668
  jump

;; 90 SWAP1
  jumpdest
  swap1
  push 0x668
  jump

;; 91 SWAP2
  jumpdest
  swap2
  push 0x668
  jump

;; 92 SWAP3
  jumpdest
  swap3
  push 0x668
  jump

;; 93 SWAP4
  jumpdest
  swap4
  push 0x668
  jump

;; 94 SWAP5
  jumpdest
  swap5
  push 0x668
  jump

;; 95 SWAP6
  jumpdest
  swap6
  push 0x668
  jump

;; 96 SWAP7
  jumpdest
  swap7
  push 0x668
  jump

;; 97 SWAP8
  jumpdest
  swap8
  push 0x668
  jump

;; 98 SWAP9
  jumpdest
  swap9
  push 0x668
  jump

;; 99 SWAP10
  jumpdest
  swap10
  push 0x668
  jump

;; 9A SWAP11
  jumpdest
  swap11
  push 0x668
  jump

;; 9B SWAP12
  jumpdest
  swap12
  push 0x668
  jump

;; 9C SWAP13
  jumpdest
  swap13
  push 0x668
  jump

;; 9D SWAP14
  jumpdest
  swap14
  push 0x668
  jump

;; 9E SWAP15
  jumpdest
  swap15
  push 0x668
  jump

;; 9F SWAP16
  jumpdest
  swap16
  push 0x668
  jump

;; A0 LOG0; TODO: jump to impl
  jumpdest
  log0
  push 0x668
  jump

;; A1 LOG1; TODO: jump to impl
  jumpdest
  log1
  push 0x668
  jump

;; A2 LOG2; TODO: jump to impl
  jumpdest
  log2
  push 0x668
  jump

;; A3 LOG3; TODO: jump to impl
  jumpdest
  log3
  push 0x668
  jump

;; A4 LOG4; TODO: jump to impl
  jumpdest
  log4
  push 0x668
  jump

;; a5 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; a6 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; a7 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; a8 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; a9 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; aa invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ab invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ac invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ad invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ae invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; af invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b0 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b1 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b2 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b3 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b4 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b5 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b6 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b7 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b8 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; b9 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ba invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; bb invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; bc invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; bd invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; be invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; bf invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c0 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c1 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c2 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c3 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c4 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c5 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c6 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c7 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c8 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; c9 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ca invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; cb invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; cc invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; cd invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ce invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; cf invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d0 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d1 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d2 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d3 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d4 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d5 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d6 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d7 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d8 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; d9 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; da invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; db invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; dc invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; dd invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; de invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; df invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e0 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e1 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e2 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e3 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e4 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e5 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e6 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e7 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e8 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; e9 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ea invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; eb invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ec invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ed invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ee invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; ef invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; F0 CREATE; TODO: jump to impl
  jumpdest
  ;; create
  invalid
  push 0x668
  jump

;; F1 CALL; TODO: jump to impl
  jumpdest
  call
  push 0x668
  jump

;; F2 CALLCODE; TODO: jump to impl
  jumpdest
  ;; callcode
  invalid
  push 0x668
  jump

;; F3 RETURN; TODO: should hook?
  jumpdest
  return
  ;; push 0x668
  ;; jump
  invalid
  invalid
  invalid
  invalid

;; F4 DELEGATECALL; TODO: jump to impl
  jumpdest
  ;; delegatecall
  invalid
  push 0x668
  jump

;; F5 CREATE2; TODO: jump to impl
  jumpdest
  ;; create2
  invalid
  push 0x668
  jump

;; f6 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; f7 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; f8 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; f9 invalid
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; FA STATICCALL; TODO: jump to impl
  jumpdest
  ;; staticcall
  invalid
  push 0x668
  jump

;; fb
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; fc
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; FD REVERT; TODO: hook?
  jumpdest
  revert
  push 0x668
  jump

;; FE INVALID
  jumpdest
  invalid
  invalid
  invalid
  invalid
  invalid

;; FF SELFDESTRUCT (DO NOT IMPLEMENT (or hook to prevent self-selfdestruct))
  jumpdest
  stop
  invalid
  invalid
  invalid
  invalid

;; stub implementations where 6-byte stubs were not enough

;; PUSHx implementation:
  jumpdest

  ;; load pc2
  push 0
  mload
  ;; [pc2]

  ;; for the sub 0x5f later
  push 0x5f
  ;; [pc2 | 0x5f]

  ;; dup pc2 to advance it later
  dup2
  ;; [pc2 | 0x5f | pc2]

  ;; (msg.data[pc2] - 0x5f) << 8 to get number of bytes
  calldataload
  push 248
  shr
  sub
  ;; [pc2 | size bytes]

  ;; dup size to advance pc2 later
  dup1
  ;; [pc2 | size bytes | size bytes]

  ;; swap1 can be optimized out but kept for sake of code clarity (LOL)
  push 4
  swap1
  shl
  ;; [pc2 | size bytes | size bits]

  ;; 256 - num_bytes
  push 256
  sub
  ;; [pc2 | size bytes | 256 - size bits]

  ;; load pc2 + 1
  dup3
  push 1
  add
  ;; [pc2 | size bytes | 256 - size bits | pc2 + 1]

  ;; load push data
  calldataload
  ;; [pc2 | size bytes | 256 - size bits | push data bytes32]

  ;; msg.data[pc2 + 1:pc2 + 1 + 32] >> size_bits
  swap1
  shr
  ;; [pc2 | size bytes | push data bytesX]

  ;; advance pc2 by amount of bytes pushed
  swap2
  ;; [push data bytesX | size bytes | pc2]
  add
  ;; [push data bytesX | size bytes + pc2]
  push 0
  mstore
  ;; [push data bits]
  push 0x668
  jump

;; MLOAD hook (offset 0x644)
;; top stack has offset; skip first word (reserved)
  jumpdest
  push 32
  add
  mload
  push 0x668
  jump

;; MSTORE hook (offset 0x64d)
;; top stack has value, second is offset; skip first word (reserved)
  jumpdest
  push 32
  add
  mstore
  push 0x668
  jump

;; MSTORE8 hook (offset 0x656)
;; top stack has value, second is offset; skip first word (reserved)
  jumpdest
  push 32
  add
  mstore8
  push 0x668
  jump

;; MSIZE hook (offset 0x65f)
;; top stack has offset; skip first word (reserved)
  jumpdest
  push 32
  msize
  sub
  push 0x668
  jump

;; jump table exit (offset 0x668)
;; advance pc
  jumpdest
  push 0
  mload
  push 1
  add
  push 0
  mstore

;; loop back to start
  push 4
  jump

;; end of bytecode (offset 0x675)
  jumpdest
  push 0x20
  dup1
  msize
  sub
  swap1
  return

